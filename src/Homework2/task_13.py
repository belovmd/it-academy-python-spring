def decodebits(bits):
    """Instructions

    Function, that should find out the transmission
    rate of the message, correctly decode the message to dots .,
    dashes - and spaces (one between characters, three between words)
    and return those as a string. Note that some extra 0's may
    naturally occur at the beginning and the end of a message,
    make sure to ignore them. Also if you have trouble discerning
    if the particular sequence of 1's is a dot or a dash, assume
    it's a dot.
    """
    import re
    bits = bits.strip('0')
    all_len = map(lambda x: len(x),
                  (re.findall(r'[1]+', bits) + re.findall(r'[0]+', bits)))
    mult = min(all_len)
    bits = bits.replace('111' * mult, '-').replace('1' * mult, '.')
    bits = bits.replace('0000000' * mult, '  ').replace('000' * mult, ' ')
    bits = bits.replace('0' * mult, '')
    print(f'Morse string is: {bits}')
    return bits


def decodemorse(morsecode):
    """Instructions

    Function decodeMorse(morseCode), that would
    take the output of the previous function and
    return a human-readable string.
    """
    morse_dict = {'.-': 'A',
                  '-...': 'B',
                  '-.-.': 'C',
                  '-..': 'D',
                  '.': 'E',
                  '..-.': 'F',
                  '--.': 'G',
                  '....': 'H',
                  '..': 'I',
                  '.---': 'J',
                  '-.-': 'K',
                  '.-..': 'L',
                  '--': 'M',
                  '-.': 'N',
                  '---': 'O',
                  '.--.': 'P',
                  '--.-': 'Q',
                  '.-.': 'R',
                  '...': 'S',
                  '-': 'T',
                  '..-': 'U',
                  '...-': 'V',
                  '.--': 'W',
                  '-..-': 'X',
                  '-.--': 'Y',
                  '--..': 'Z'}
    list_of_morse_symbols = morsecode.split(' ')
    for i, symbol in enumerate(list_of_morse_symbols):
        if symbol and symbol in morse_dict:
            list_of_morse_symbols[i] = morse_dict[symbol]
        elif symbol and symbol not in morse_dict:
            list_of_morse_symbols[i] = '.'
        else:
            list_of_morse_symbols[i] = ' '
    print(f"Decoded message: {''.join(list_of_morse_symbols)}")
    return ''.join(list_of_morse_symbols)


if __name__ == '__main__':
    tests = [['1100110011001100000011000000111111'
              '00110011111100111111000000000000001'
              '10011111100111111001111110000001100'
              '11001111110000001111110011001100000011'],
             ['1'],
             ['101'],
             ['10001'],
             ['10111'],
             ['1110111'],
             ['111'],
             ['1111111'],
             ['110011'],
             ['111000111'],
             ['111110000011111'],
             ['111000000000111'],
             ['11111100111111'],
             ['111000111000111'],
             ['1111110000001111110000001111110000001111'
              '11000000000000000000111111000000000000000'
              '000111111111111111111000000111111000000111'
              '111111111111111000000111111111111111111000'
              '000000000000000000000000000000000000000111'
              '11100000011111111111111111100000011111111'
              '1111111111000000111111111111111111000000000'
              '0000000001111110000001111110000001111111111'
              '111111110000000000000000001111111111111111'
              '110000001111110000001111110000000000000000'
              '00111111'],
             ['01110'],
             ['000000011100000'],
             ['0001110001010101000100000001110111010111000'
              '10101110001010001110101110100011101011100000'
              '001110101010001011101000111011101110001011101'
              '110001110100000001010111010001110111011100011'
              '101010111000000010111011101110001010111000111'
              '011100010111011101000101010000000111011101110'
              '0010101011100010001011101000000011100010101010'
              '00100000001011101010001011100011101110101000111'
              '0101110111000000011101010001110111011100011101'
              '1101000101110101110101110'],
             ['11111111111111100000000000000011111000001111'
              '10000011111000001111100000000000000011111000'
              '000000000000000000000000000000001111111111111'
              '110000011111111111111100000111110000011111111'
              '1111111000000000000000111110000011111000001111'
              '1111111111100000000000000011111000001111100000'
              '000000000011111111111111100000111110000011111'
              '111111111100000111110000000000000001111111111'
              '1111100000111110000011111111111111100000000000'
              '0000000000000000000000001111111111111110000011'
              '1110000011111000001111100000000000000011111000'
              '00111111111111111000001111100000000000000011111'
              '1111111111000001111111111111110000011111111111'
              '11110000000000000001111100000111111111111111000'
              '00111111111111111000000000000000111111111111111'
              '00000111110000000000000000000000000000000000011'
              '11100000111110000011111111111111100000111110000'
              '00000000000111111111111111000001111111111111110'
              '00001111111111111110000000000000001111111111111'
              '11000001111100000111110000011111111111111100000'
              '00000000000000000000000000000011111000001111111'
              '11111111000001111111111111110000011111111111111'
              '10000000000000001111100000111110000011111111111'
              '11110000000000000001111111111111110000011111111'
              '11111110000000000000001111100000111111111111111'
              '00000111111111111111000001111100000000000000011'
              '11100000111110000011111000000000000000000000000'
              '00000000000111111111111111000001111111111111110'
              '00001111111111111110000000000000001111100000111'
              '11000001111100000111111111111111000000000000000'
              '11111000000000000000111110000011111111111111100'
              '00011111000000000000000000000000000000000001111'
              '11111111111000000000000000111110000011111000001'
              '11110000011111000000000000000111110000000000000'
              '00000000000000000000001111100000111111111111111'
              '00000111110000011111000000000000000111110000011'
              '11111111111110000000000000001111111111111110000'
              '01111111111111110000011111000001111100000000000'
              '00001111111111111110000011111000001111111111111'
              '11000001111111111111110000000000000000000000000'
              '00000000001111111111111110000011111000001111100'
              '00000000000001111111111111110000011111111111111'
              '10000011111111111111100000000000000011111111111'
              '11110000011111111111111100000111110000000000000'
              '00111110000011111111111111100000111110000011111'
              '1111111111000001111100000111111111111111']]
    for index, test in enumerate(tests):
        print(f'--------- Test # {index + 1} ---------')
        decodemorse(decodebits(test[0]))
